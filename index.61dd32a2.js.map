{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAiB,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAC3C,EAAQ,SAAS,aAAa,CAAC,qBAC/B,EAAU,SAAS,aAAa,CAAC,uBAEjC,EAAmB,EAAW,GAAG,CAAC,SAAC,CAAzC,EACE,OACA,WAAW,EAAG,WAAW,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,I,GAEtC,EAAM,EAAiB,MAAM,CAAC,SAAC,CAAA,CAAK,CAA1C,EAAoD,OAAA,EAAM,C,GACpD,EAAgB,EAAM,EAAiB,MAAM,CAEnD,SAAS,IAIP,IAAK,IAJY,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAS,EACpB,EAAe,EAAO,QAAQ,GAChC,EAAS,GAEJ,EAAI,EAAG,EAAI,EAAa,MAAM,CAAE,IACnC,EAAI,GAAK,AAAC,CAAA,EAAa,MAAM,CAAG,CAAA,EAAK,GAAM,GAC7C,CAAA,GAAU,GADZ,EAIA,GAAU,EAAa,MAAM,CAAC,GAGhC,OAAO,CACT,CAEA,EAAM,WAAW,CAAG,EAAU,GAC9B,EAAQ,WAAW,CAAG,EAAU","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar population = _to_consumable_array(document.querySelectorAll(\".population\"));\nvar total = document.querySelector(\".total-population\");\nvar average = document.querySelector(\".average-population\");\nvar populationValues = population.map(function(el) {\n    return(// eslint-disable-next-line prettier/prettier\n    parseFloat(el.textContent.split(\",\").join(\"\")));\n});\nvar sum = populationValues.reduce(function(acc, value) {\n    return acc + value;\n});\nvar avarageValues = sum / populationValues.length;\nfunction formatted() {\n    var number = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    var numberString = number.toString();\n    var result = \"\";\n    for(var i = 0; i < numberString.length; i++){\n        if (i > 0 && (numberString.length - i) % 3 === 0) result += \",\";\n        result += numberString.charAt(i);\n    }\n    return result;\n}\ntotal.textContent = formatted(sum);\naverage.textContent = formatted(avarageValues);\n\n//# sourceMappingURL=index.61dd32a2.js.map\n","'use strict';\n\nconst population = [...document.querySelectorAll('.population')];\nconst total = document.querySelector('.total-population');\nconst average = document.querySelector('.average-population');\n\nconst populationValues = population.map((el) =>\n  // eslint-disable-next-line prettier/prettier\n  parseFloat(el.textContent.split(',').join('')));\n\nconst sum = populationValues.reduce((acc, value) => acc + value);\nconst avarageValues = sum / populationValues.length;\n\nfunction formatted(number = 0) {\n  const numberString = number.toString();\n  let result = '';\n\n  for (let i = 0; i < numberString.length; i++) {\n    if (i > 0 && (numberString.length - i) % 3 === 0) {\n      result += ',';\n    }\n\n    result += numberString.charAt(i);\n  }\n\n  return result;\n}\n\ntotal.textContent = formatted(sum);\naverage.textContent = formatted(avarageValues);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","population","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","total","querySelector","average","populationValues","map","el","parseFloat","textContent","split","join","sum","reduce","acc","value","avarageValues","formatted","number","arguments","numberString","result","charAt"],"version":3,"file":"index.61dd32a2.js.map"}